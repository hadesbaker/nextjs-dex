'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var EventEmitter = require('eventemitter3');
var core = require('@moralisweb3/core');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var EventEmitter__default = /*#__PURE__*/_interopDefaultLegacy(EventEmitter);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

// Events emitted by the connectors,
// The InternalWeb3Provider of Moralis will listen to these
exports.EvmConnectorEvent = void 0;
(function (EvmConnectorEvent) {
    EvmConnectorEvent["CONNECT"] = "connect";
    EvmConnectorEvent["DISCONNECT"] = "disconnect";
    EvmConnectorEvent["CHAIN_CHANGED"] = "chainChanged";
    EvmConnectorEvent["ACCOUNT_CHANGED"] = "accountChanged";
})(exports.EvmConnectorEvent || (exports.EvmConnectorEvent = {}));

/**
 * Abstract connector to connect EIP-1193 providers to Moralis
 *
 * It should implement at least:
 * - createProvider()
 * - createConnection()
 * - name: a name to identify
 * - network: the network type that is used (eg. 'evm')
 */
var EvmAbstractConnector = /** @class */ (function (_super) {
    __extends(EvmAbstractConnector, _super);
    function EvmAbstractConnector(name, core$1) {
        var _this = _super.call(this) || this;
        _this.name = name;
        _this.core = core$1;
        _this.network = 'evm';
        _this._provider = null;
        _this._chain = null;
        _this._account = null;
        _this.name = name;
        _this.logger = new core.LoggerController(_this.core.config, "evmConnector: ".concat(_this.name));
        _this.handleAccountsChanged = _this.handleAccountsChanged.bind(_this);
        _this.handleChainChanged = _this.handleChainChanged.bind(_this);
        _this.handleConnect = _this.handleConnect.bind(_this);
        _this.handleDisconnect = _this.handleDisconnect.bind(_this);
        return _this;
    }
    Object.defineProperty(EvmAbstractConnector.prototype, "provider", {
        get: function () {
            return this._provider;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmAbstractConnector.prototype, "chain", {
        get: function () {
            return this._chain;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(EvmAbstractConnector.prototype, "account", {
        get: function () {
            return this._account;
        },
        enumerable: false,
        configurable: true
    });
    EvmAbstractConnector.prototype.connect = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var connection;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.createConnection(options)];
                    case 1:
                        connection = _a.sent();
                        this._account = connection.account;
                        this._chain = connection.chain;
                        return [2 /*return*/, connection];
                }
            });
        });
    };
    EvmAbstractConnector.prototype.getProvider = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!!this._provider) return [3 /*break*/, 2];
                        _a = this;
                        return [4 /*yield*/, this.createProvider(options)];
                    case 1:
                        _a._provider = _b.sent();
                        this.subscribeToEvents(this._provider);
                        _b.label = 2;
                    case 2: return [2 /*return*/, this._provider];
                }
            });
        });
    };
    EvmAbstractConnector.prototype.subscribeToEvents = function (provider) {
        provider.on(core.EvmProviderEvent.CHAIN_CHANGED, this.handleChainChanged);
        provider.on(core.EvmProviderEvent.ACCOUNTS_CHANGED, this.handleAccountsChanged);
        provider.on(core.EvmProviderEvent.CONNECT, this.handleConnect);
        provider.on(core.EvmProviderEvent.DISCONNECT, this.handleDisconnect);
    };
    // unsubscribeToEvents(provider: EvmProvider) {
    //   provider.removeListener(EvmProviderEvent.CHAIN_CHANGED, this.handleChainChanged);
    //   provider.removeListener(EvmProviderEvent.ACCOUNTS_CHANGED, this.handleAccountsChanged);
    //   provider.removeListener(EvmProviderEvent.CONNECT, this.handleConnect);
    //   provider.removeListener(EvmProviderEvent.DISCONNECT, this.handleDisconnect);
    // }
    /**
     * Updates account and emit event, on EIP-1193 accountsChanged events
     */
    EvmAbstractConnector.prototype.handleAccountsChanged = function (accounts) {
        if (accounts.length === 0) {
            return;
        }
        this._account = core.EvmAddress.create(accounts[0]);
        this.emit(exports.EvmConnectorEvent.ACCOUNT_CHANGED, this.account);
    };
    /**
     * Updates chainId and emit event, on EIP-1193 accountsChanged events
     */
    EvmAbstractConnector.prototype.handleChainChanged = function (chain) {
        var newChain = core.EvmChain.create(chain);
        this._chain = newChain;
        this.emit(exports.EvmConnectorEvent.CHAIN_CHANGED, newChain);
    };
    EvmAbstractConnector.prototype.handleConnect = function (providerInfo) {
        this.emit(exports.EvmConnectorEvent.CONNECT, providerInfo);
    };
    EvmAbstractConnector.prototype.handleDisconnect = function (error) {
        this.emit(exports.EvmConnectorEvent.DISCONNECT, error);
    };
    EvmAbstractConnector.prototype.cancelRequest = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new core.MoralisNetworkConnectorError({
                    code: core.NetworkConnectorErrorCode.NOT_IMPLEMENTED,
                    message: 'cancelRequest() is not implemented',
                });
            });
        });
    };
    return EvmAbstractConnector;
}(EventEmitter__default["default"]));

/**
 * Get all MoralisRpcs, based on the provided speedyNodeKey
 */
var getMoralisRpcs = function (speedyNodeKey) { return ({
    1: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/mainnet"),
    3: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/ropsten"),
    4: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/rinkeby"),
    5: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/goerli"),
    42: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/eth/kovan"),
    137: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/polygon/mainnet"),
    80001: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/polygon/mumbai"),
    56: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/bsc/mainnet"),
    97: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/bsc/testnet"),
    43114: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/avalanche/mainnet"),
    43113: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/avalanche/testnet"),
    250: "https://speedy-nodes-nyc.moralis.io/".concat(speedyNodeKey, "/fantom/mainnet"),
}); };
var getMoralisRpc = function (speedyNodeKey, chain) {
    var rpcs = getMoralisRpcs(speedyNodeKey);
    var numberChainId = core.EvmChain.create(chain).decimal;
    var validChainIds = Object.keys(rpcs).map(function (id) { return +id; });
    if (!validChainIds.includes(numberChainId)) {
        throw new core.MoralisNetworkConnectorError({
            code: core.NetworkConnectorErrorCode.INVALID_ARGUMENT,
            message: "Invalid chainId. Supported chains: ".concat(validChainIds.join(', ')),
        });
    }
};

exports.EvmAbstractConnector = EvmAbstractConnector;
exports.getMoralisRpc = getMoralisRpc;
exports.getMoralisRpcs = getMoralisRpcs;
//# sourceMappingURL=index.js.map
