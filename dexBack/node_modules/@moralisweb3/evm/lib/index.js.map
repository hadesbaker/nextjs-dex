{"version":3,"file":"index.js","sources":["../src/events/EvmNetworkEvent.ts","../src/assert/assertChain.ts","../src/assert/assertProvider.ts","../src/utils/wrapEthersTransactionResponse.ts","../src/chainMethods/sendTransaction.ts","../src/chainMethods/signMessage.ts","../src/chainMethods/transferNative.ts","../src/Contract/generated/factories/Erc1155__factory.ts","../src/Contract/generated/factories/Erc20__factory.ts","../src/Contract/generated/factories/Erc721__factory.ts","../src/Contract/generated/factories/index.ts","../src/chainMethods/transferErc20.ts","../src/assert/assertAddress.ts","../src/chainMethods/transferErc721.ts","../src/Connection/walletConnection.ts","../src/Connection/Connectors.ts","../src/Connection/Connection.ts","../src/chainMethods/transferErc1155.ts","../src/chainMethods/executeFunction.ts","../src/MoralisEvm.ts"],"sourcesContent":["import { AnyConnector, EvmAddress, EvmChain, EvmConnectionData } from '@moralisweb3/core';\nimport { ethers } from 'ethers';\n\n/**\n * Events fired by MoralisEvm upon changes in the network status\n */\nexport enum EvmNetworkEvent {\n  // Fired when a valid connect to a network has been established\n  CONNECTING = 'Connecting',\n  CONNECTED = 'Connected',\n  DISCONNECTED = 'Disconnected',\n  CONNECTING_ERROR = 'ConnectingError',\n  CHAIN_CHANGED = 'ChainChanged',\n  ACCOUNT_CHANGED = 'AccountChanged',\n  PROVIDER_UPDATED = 'ProviderUpdated',\n}\n\nexport type EvmNetworkEventMap = {\n  [EvmNetworkEvent.CONNECTING]: () => void;\n  [EvmNetworkEvent.CONNECTED]: (data: EvmConnectionData<AnyConnector>) => void;\n  [EvmNetworkEvent.DISCONNECTED]: () => void;\n  [EvmNetworkEvent.CONNECTING_ERROR]: (error: Error) => void;\n  [EvmNetworkEvent.ACCOUNT_CHANGED]: (data: { account: EvmAddress }) => void;\n  [EvmNetworkEvent.CHAIN_CHANGED]: (data: { chain: EvmChain }) => void;\n  [EvmNetworkEvent.PROVIDER_UPDATED]: (data: { provider: null | ethers.providers.JsonRpcSigner }) => void;\n};\n","import { EvmChain, EvmChainish, MoralisNetworkError, NetworkErrorCode } from '@moralisweb3/core';\n\nconst isValidChain = (chain: unknown): chain is EvmChain => {\n  if (chain instanceof EvmChain) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const assertChain = (chain: unknown, message?: string) => {\n  if (!isValidChain(chain)) {\n    throw new MoralisNetworkError({\n      code: NetworkErrorCode.NO_CHAIN_SET,\n      message: message ?? 'No valid chain',\n    });\n  }\n\n  return chain;\n};\n\n/**\n * @param {EvmChain} providedChain The chain provided from function call.\n * @param {EvmChain} chain The evm chain.\n */\nexport const assertChainEquality = (providedChain: EvmChainish, chain: EvmChain): void => {\n  if (!chain.equals(providedChain)) {\n    throw new MoralisNetworkError({\n      code: NetworkErrorCode.CHAIN_MISMATCH,\n      message: `Expected chain ${chain.apiHex}, but got ${EvmChain.create(providedChain).apiHex}`,\n    });\n  }\n};\n","import { MoralisNetworkError, NetworkErrorCode } from '@moralisweb3/core';\nimport { ethers } from 'ethers';\n\nconst isValidProvider = (provider: unknown): provider is ethers.providers.JsonRpcSigner => {\n  if (provider instanceof ethers.providers.JsonRpcSigner) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const assertProvider = (provider: unknown, message?: string) => {\n  if (!isValidProvider(provider)) {\n    throw new MoralisNetworkError({\n      code: NetworkErrorCode.NO_CHAIN_SET,\n      message:\n        message ?? 'Provider is not set. Make sure to have called Moralis.connect() or MoralisEvm.connect() first',\n    });\n  }\n\n  return provider;\n};\n","import {\n  EvmChainish,\n  EvmTransactionReceipt,\n  EvmTransactionReceiptInput,\n  EvmTransactionResponse,\n  EvmTransactionResponseInput,\n} from '@moralisweb3/core';\nimport { ethers } from 'ethers';\n\nconst ethTxReceiptToMoralisTxReceipt = ({\n  effectiveGasPrice,\n  ...tx\n}: ethers.providers.TransactionReceipt): EvmTransactionReceiptInput => ({\n  ...tx,\n  gasPrice: effectiveGasPrice,\n});\n\nconst ethTxResponseToMoralisTxResponse = (\n  { chainId, ...tx }: ethers.providers.TransactionResponse,\n  chain: EvmChainish | null,\n): EvmTransactionResponseInput => ({\n  ...tx,\n  // Manually overwrite chain, because EthersJs does not set it correctly\n  chain: chain ?? chainId,\n});\n\nconst waitForResponse = async (\n  ethResult: ethers.providers.TransactionResponse,\n  transaction: EvmTransactionResponse,\n  confirmations?: number,\n) => {\n  const receipt = await ethResult.wait(confirmations);\n  return new EvmTransactionReceipt(ethTxReceiptToMoralisTxReceipt(receipt), transaction);\n};\n\nexport const wrapEthersTransactionResponse = (\n  ethersTransactionResponse: ethers.providers.TransactionResponse,\n  chainId: EvmChainish | null,\n) =>\n  EvmTransactionResponse.create(\n    ethTxResponseToMoralisTxResponse(ethersTransactionResponse, chainId),\n    async (transactionResponse, confirmations) =>\n      waitForResponse(ethersTransactionResponse, transactionResponse, confirmations),\n  );\n","import { EvmChain, EvmTransactionInput, EvmTransaction } from '@moralisweb3/core';\nimport { ethers } from 'ethers';\nimport { assertChain } from '../assert/assertChain';\nimport { assertProvider } from '../assert/assertProvider';\nimport { wrapEthersTransactionResponse } from '../utils/wrapEthersTransactionResponse';\n\nexport const makeSendTransaction =\n  (_provider: ethers.providers.JsonRpcSigner | null, _chain: EvmChain | null) => async (data: EvmTransactionInput) => {\n    const provider = assertProvider(_provider);\n    const chain = assertChain(\n      data.chain ?? _chain,\n      'Chain is not set on MoralisEvm. Make sure to be properly connected',\n    );\n\n    data.chain = chain;\n\n    const transaction = EvmTransaction.create(data, async (tx) => {\n      const ethTransactionResponse = await provider.sendTransaction(tx.toEthRequest());\n\n      return wrapEthersTransactionResponse(ethTransactionResponse, chain);\n    });\n\n    return transaction.send();\n  };\n","import { ethers } from 'ethers';\nimport { assertProvider } from '../assert/assertProvider';\n\nexport const makeSignMessage = (_provider: ethers.providers.JsonRpcSigner | null) => async (message: string) => {\n  const provider = assertProvider(_provider);\n  const signature = await provider.signMessage(message);\n\n  return signature;\n};\n","import {\n  EvmAddress,\n  EvmAddressish,\n  EvmChain,\n  EvmChainish,\n  EvmNative,\n  EvmNativeish,\n  EvmTransactionInput,\n  EvmTransactionResponse,\n} from '@moralisweb3/core';\nimport { assertChain, assertChainEquality } from '../assert/assertChain';\n\nexport interface TransferNativeOptions {\n  to: EvmAddressish;\n  value: EvmNativeish;\n  chain?: EvmChainish;\n}\n\nexport const makeTransferNative =\n  (sendTransaction: (data: EvmTransactionInput) => Promise<EvmTransactionResponse>, _chain: EvmChain | null) =>\n  async (options: TransferNativeOptions) => {\n    const to = EvmAddress.create(options.to);\n    const value = EvmNative.create(options.value);\n    const chain = assertChain(_chain, 'Chain is not set on MoralisEvm. Make sure to be properly connected');\n    if (options.chain) {\n      assertChainEquality(options.chain, chain);\n    }\n\n    const transaction = await sendTransaction({\n      to: to.checksum,\n      value: value.value,\n      chain,\n    });\n\n    return transaction;\n  };\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Erc1155, Erc1155Interface } from \"../Erc1155\";\n\nconst _abi = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_id\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_ids\",\n        type: \"uint256[]\",\n      },\n      {\n        name: \"_values\",\n        type: \"uint256[]\",\n      },\n      {\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeBatchTransferFrom\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owners\",\n        type: \"address[]\",\n      },\n      {\n        name: \"_ids\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"balanceOfBatch\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256[]\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_operator\",\n        type: \"address\",\n      },\n      {\n        name: \"_approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_id\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n      {\n        name: \"_data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"_operator\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"_id\",\n        type: \"uint256\",\n      },\n      {\n        indexed: false,\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"TransferSingle\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"_operator\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"_ids\",\n        type: \"uint256[]\",\n      },\n      {\n        indexed: false,\n        name: \"_values\",\n        type: \"uint256[]\",\n      },\n    ],\n    name: \"TransferBatch\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_operator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"_approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: false,\n        name: \"_value\",\n        type: \"string\",\n      },\n      {\n        indexed: true,\n        name: \"_id\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"URI\",\n    type: \"event\",\n  },\n];\n\nexport class Erc1155__factory {\n  static readonly abi = _abi;\n  static createInterface(): Erc1155Interface {\n    return new utils.Interface(_abi) as Erc1155Interface;\n  }\n  static connect(\n    address: string,\n    signerOrProvider: Signer | Provider\n  ): Erc1155 {\n    return new Contract(address, _abi, signerOrProvider) as Erc1155;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Erc20, Erc20Interface } from \"../Erc20\";\n\nconst _abi = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\n\nexport class Erc20__factory {\n  static readonly abi = _abi;\n  static createInterface(): Erc20Interface {\n    return new utils.Interface(_abi) as Erc20Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Erc20 {\n    return new Contract(address, _abi, signerOrProvider) as Erc20;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\n\nimport { Contract, Signer, utils } from \"ethers\";\nimport type { Provider } from \"@ethersproject/providers\";\nimport type { Erc721, Erc721Interface } from \"../Erc721\";\n\nconst _abi = [\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"getApproved\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_approved\",\n        type: \"address\",\n      },\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"ownerOf\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_operator\",\n        type: \"address\",\n      },\n      {\n        name: \"_approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"setApprovalForAll\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n      {\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"safeTransferFrom\",\n    outputs: [],\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_operator\",\n        type: \"address\",\n      },\n    ],\n    name: \"isApprovedForAll\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_approved\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_tokenId\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"_operator\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"_approved\",\n        type: \"bool\",\n      },\n    ],\n    name: \"ApprovalForAll\",\n    type: \"event\",\n  },\n];\n\nexport class Erc721__factory {\n  static readonly abi = _abi;\n  static createInterface(): Erc721Interface {\n    return new utils.Interface(_abi) as Erc721Interface;\n  }\n  static connect(address: string, signerOrProvider: Signer | Provider): Erc721 {\n    return new Contract(address, _abi, signerOrProvider) as Erc721;\n  }\n}\n","/* Autogenerated file. Do not edit manually. */\n/* tslint:disable */\n/* eslint-disable */\nexport { Erc1155__factory } from \"./Erc1155__factory\";\nexport { Erc20__factory } from \"./Erc20__factory\";\nexport { Erc721__factory } from \"./Erc721__factory\";\n","import { Erc20Value, Erc20Valueish, EvmAddress, EvmAddressish, EvmChainish } from '@moralisweb3/core';\nimport { ethers } from 'ethers';\nimport { assertChain, assertChainEquality } from '../assert/assertChain';\nimport { assertProvider } from '../assert/assertProvider';\nimport { Erc20__factory } from '../Contract';\nimport { wrapEthersTransactionResponse } from '../utils/wrapEthersTransactionResponse';\n\nexport interface TransferErc20Options {\n  contractAddress: EvmAddressish;\n  to: EvmAddressish;\n  value: Erc20Valueish;\n  chain?: EvmChainish;\n}\n\nexport const makeTransferErc20 =\n  (_provider: null | ethers.providers.JsonRpcSigner, _chain: EvmChainish | null) =>\n  async (options: TransferErc20Options) => {\n    const provider = assertProvider(_provider);\n\n    const chain = assertChain(_chain, 'Chain is not set on MoralisEvm. Make sure to be properly connected');\n    if (options.chain) {\n      assertChainEquality(options.chain, chain);\n    }\n\n    const contractAddress = EvmAddress.create(options.contractAddress);\n    const toAddress = EvmAddress.create(options.to);\n    const value = Erc20Value.create(options.value).value;\n\n    const token = Erc20__factory.connect(contractAddress.checksum, provider);\n\n    const response = await token.transfer(toAddress.checksum, value);\n\n    return wrapEthersTransactionResponse(response, _chain);\n  };\n","import { EvmAddress, MoralisNetworkError, NetworkErrorCode } from '@moralisweb3/core';\n\nconst isValidAddress = (address: unknown): address is EvmAddress => {\n  if (address instanceof EvmAddress) {\n    return true;\n  }\n\n  return false;\n};\n\nexport const assertAddress = (address: unknown, message?: string) => {\n  if (!isValidAddress(address)) {\n    throw new MoralisNetworkError({\n      code: NetworkErrorCode.NO_CHAIN_SET,\n      message: message ?? 'No valid address',\n    });\n  }\n\n  return address;\n};\n","import { EvmAddress, EvmAddressish, EvmChainish } from '@moralisweb3/core';\nimport { BigNumberish, ethers } from 'ethers';\nimport { assertAddress } from '../assert/assertAddress';\nimport { assertChain, assertChainEquality } from '../assert/assertChain';\nimport { assertProvider } from '../assert/assertProvider';\nimport { Erc721__factory } from '../Contract';\nimport { wrapEthersTransactionResponse } from '../utils/wrapEthersTransactionResponse';\n\nexport interface TransferErc721Options {\n  contractAddress: EvmAddressish;\n  to: EvmAddressish;\n  tokenId: BigNumberish;\n  chain?: EvmChainish;\n}\n\nexport const makeTransferErc721 =\n  (_provider: null | ethers.providers.JsonRpcSigner, _account: EvmAddress | null, _chain: EvmChainish | null) =>\n  async (options: TransferErc721Options) => {\n    const provider = assertProvider(_provider);\n    const fromAddress = assertAddress(_account, 'No account is connected');\n\n    const chain = assertChain(_chain, 'Chain is not set on MoralisEvm. Make sure to be properly connected');\n    if (options.chain) {\n      assertChainEquality(options.chain, chain);\n    }\n\n    const contractAddress = EvmAddress.create(options.contractAddress);\n    const toAddress = EvmAddress.create(options.to);\n    const tokenId = options.tokenId;\n\n    const token = Erc721__factory.connect(contractAddress.checksum, provider);\n\n    const response = await token['safeTransferFrom(address,address,uint256)'](\n      fromAddress.checksum,\n      toAddress.checksum,\n      tokenId,\n    );\n\n    return wrapEthersTransactionResponse(response, chain);\n  };\n","import { EvmBaseConnectOptions } from '@moralisweb3/core';\nimport { EvmAbstractConnector } from '@moralisweb3/evm-connector-utils';\nimport { Connectors } from './Connectors';\n\nexport const connectWallet = async <Options extends EvmBaseConnectOptions>(\n  connectors: Connectors,\n  connectorName: string,\n  options: Options,\n) => {\n  const connector = connectors.get(connectorName);\n  const data = await connector.connect(options);\n\n  return { ...data, connector };\n};\n\nexport const cancelWalletRequest = async (connector: EvmAbstractConnector) => {\n  await connector.cancelRequest();\n};\n","import { MoralisCore, MoralisCoreProvider, MoralisNetworkError, NetworkErrorCode } from '@moralisweb3/core';\nimport { ConnectorFactory, EvmAbstractConnector } from '@moralisweb3/evm-connector-utils';\nimport MetamaskConnector from '@moralisweb3/evm-metamask-connector';\n\nconst DEFAULT_CONNECTORS: ConnectorFactory[] = [MetamaskConnector];\n\nexport class Connectors {\n  private _connectors = new Map<string, EvmAbstractConnector>();\n\n  public static create(): Connectors {\n    const core = MoralisCoreProvider.getDefault(); // TODO: we should get the core instance from a parent class.\n    const connectors = new Connectors(core);\n    DEFAULT_CONNECTORS.forEach((connector) => connectors.register(connector));\n    return connectors;\n  }\n\n  public constructor(private readonly core: MoralisCore) {}\n\n  /**\n   * Register a new connector based on a EvmAbstractConnector\n   */\n  public register = (connector: EvmAbstractConnector | ConnectorFactory) => {\n    if ('create' in connector) {\n      connector = connector.create(this.core);\n    }\n    if (this._connectors.has(connector.name)) {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.DUPLICATE_WALLET,\n        message: `The connector ${connector.name} has already been registered.`,\n      });\n    }\n\n    this._connectors.set(connector.name, connector);\n  };\n\n  /**\n   * Returns the connector with the given name.\n   * This connector should have been registered with `register`\n   * Throws an error if no connector with the given name has been registered.\n   */\n  get = <Connector extends EvmAbstractConnector = EvmAbstractConnector>(name: string): Connector => {\n    const module = this._connectors.get(name);\n\n    if (!module) {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.WALLET_NOT_FOUND,\n        message: `Connector \"${name}\" does not exist.`,\n      });\n    }\n\n    return module as Connector;\n  };\n\n  /**\n   * Remove the connector with the provided name, if it has been registered,\n   * or throws an error if the connector cannot be found.\n   */\n  remove = (name: string) => {\n    const isRemoved = this._connectors.delete(name);\n\n    if (!isRemoved) {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.WALLET_NOT_FOUND,\n        message: `Connector \"${name}\" does not exist.`,\n      });\n    }\n  };\n\n  /**\n   * List all the registered connectors\n   */\n  list = () => {\n    return Array.from(this._connectors.values());\n  };\n\n  /**\n   * Returns the names of all registered connectors\n   */\n  get names() {\n    return this.list().map((module) => module.name);\n  }\n}\n","import { providers } from 'ethers';\nimport TypedEmitter from 'typed-emitter';\nimport {\n  EvmAddress,\n  EvmChain,\n  EvmConnect,\n  EvmConnectionData,\n  EvmProvider,\n  LoggerController,\n  MoralisNetworkError,\n  NetworkErrorCode,\n  MoralisState,\n} from '@moralisweb3/core';\nimport { EvmAbstractConnector, EvmConnectorEvent } from '@moralisweb3/evm-connector-utils';\nimport { EvmNetworkEvent, EvmNetworkEventMap } from '../events/EvmNetworkEvent';\nimport { connectWallet, cancelWalletRequest } from './walletConnection';\nimport { Connectors } from './Connectors';\nimport { StateContext, State, StateEvent } from './types';\n\nexport class Connection {\n  private _logger;\n  private _emitter;\n\n  readonly connectors;\n\n  // Provider that is returned from a connection to a connector (is used to establish the provider via _updateProvider())\n  private _internalProvider: EvmProvider | null = null;\n  // EthersJs provider, used to make chain interactions\n  private _provider: providers.Web3Provider | null = null;\n  // Used connector for the currect connection\n  connector: EvmAbstractConnector | null = null;\n\n  private readonly state = new MoralisState<StateContext, StateEvent, State>('Connection');\n\n  constructor(logger: LoggerController, emitter: TypedEmitter<EvmNetworkEventMap>) {\n    this.connectors = Connectors.create();\n    this._logger = logger;\n    this._emitter = emitter;\n\n    this.state.start({\n      initial: 'Disconnected',\n      states: {\n        Disconnected: {\n          entry: this.handleDisconnected,\n          on: {\n            CONNECT: {\n              target: 'Connecting',\n            },\n          },\n        },\n        Connecting: {\n          entry: this.handleConnecting,\n          on: {\n            CONNECT_SUCCESS: {\n              target: 'Connected',\n            },\n            CONNECT_ERROR: {\n              target: 'Disconnected',\n            },\n          },\n        },\n        Connected: {\n          entry: this.handleConnected,\n          on: {\n            DISCONNECT: {\n              target: 'Disconnected',\n            },\n          },\n        },\n      },\n    });\n  }\n\n  private _handleAccountChange = (account: EvmAddress) => {\n    this._logger.verbose('Chain changed', { account });\n    this._emitter.emit(EvmNetworkEvent.ACCOUNT_CHANGED, { account });\n  };\n\n  private _handleChainChange = (chain: EvmChain) => {\n    this._logger.verbose('Chain changed', { chain });\n    this._emitter.emit(EvmNetworkEvent.CHAIN_CHANGED, { chain });\n\n    this._updateProvider();\n  };\n\n  /**\n   * Updates the ._provider (and therefore .provider) instance, based on the\n   * _internalProvider, that is retreived from a connector, and the provided chain.\n   * We need to reset this provider every time a chain chainges, as recommended by ethersJs,\n   * for user protection.\n   */\n  private _updateProvider() {\n    // No need to update if we have no internalProvider set\n    if (!this._internalProvider) {\n      this._provider = null;\n      return;\n    }\n\n    // No need to change provider if we have not chain set\n    if (!this.chain) {\n      return;\n    }\n\n    const newProvider = new providers.Web3Provider(this._internalProvider, this.chain?.decimal);\n    this._provider = newProvider;\n    this._logger.verbose('Provider updated', { provider: newProvider });\n\n    this._emitter.emit(EvmNetworkEvent.PROVIDER_UPDATED, { provider: this.provider });\n  }\n\n  /**\n   * State change handlers\n   */\n\n  private handleDisconnected = (context: StateContext, event: StateEvent) => {\n    if (event.type === 'xstate.init') {\n      // Don't do anything initially, as we start in disconnected state\n      return;\n    }\n\n    this._internalProvider = null;\n    this._updateProvider();\n\n    if (this.connector) {\n      this.connector.off(EvmConnectorEvent.ACCOUNT_CHANGED, this._handleAccountChange);\n      this.connector.off(EvmConnectorEvent.CHAIN_CHANGED, this._handleChainChange);\n      this.connector = null;\n    }\n\n    this._logger.verbose('Disconnected', { context, event });\n    this._emitter.emit(EvmNetworkEvent.DISCONNECTED);\n\n    if (event.type === 'CONNECT_ERROR') {\n      const error = event.data;\n\n      this._emitter.emit(EvmNetworkEvent.CONNECTING_ERROR, error);\n\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.CANNOT_CONNECT,\n        message: `Connection failed: ${error.name}: ${error.message}`,\n        cause: error,\n      });\n    }\n  };\n\n  /**\n   * Connect to the Evm chain vased on the provided wallet and its options.\n   * Will trigger a CONNECT_SUCCESS event on success or CONNECT_ERROR event on error\n   */\n  private handleConnecting = (context: StateContext, event: StateEvent) => {\n    this._logger.verbose('Connecting', { context, event });\n\n    // Should only call connecting via the CONNECT event\n    if (event.type !== 'CONNECT') {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.CANNOT_CONNECT,\n        message: 'Cannot connect, connection triggered incorrectly.',\n      });\n    }\n\n    const { connector, options } = event.data;\n\n    this._emitter.emit(EvmNetworkEvent.CONNECTING);\n\n    connectWallet(this.connectors, connector, options ?? {})\n      .then((data) => this.state.transition({ type: 'CONNECT_SUCCESS', data }))\n      .catch((error: Error) => this.state.transition({ type: 'CONNECT_ERROR', data: error }));\n  };\n\n  private handleConnected = (context: StateContext, event: StateEvent) => {\n    this._logger.verbose('Connected', { context, event });\n\n    // Should only be connected successfully via the CONNECT_SUCCESS event\n    if (event.type !== 'CONNECT_SUCCESS') {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.CANNOT_CONNECT,\n        message: 'Connected incorrectly.',\n      });\n    }\n\n    const { connector, provider } = event.data;\n    this.connector = connector;\n    this._internalProvider = provider;\n    this._updateProvider();\n\n    connector.on(EvmConnectorEvent.ACCOUNT_CHANGED, this._handleAccountChange);\n    connector.on(EvmConnectorEvent.CHAIN_CHANGED, this._handleChainChange);\n\n    this._emitter.emit(EvmNetworkEvent.CONNECTED, event.data);\n  };\n\n  /**\n   * Utilities\n   */\n\n  get isConnected() {\n    return this.state.match('Connected');\n  }\n\n  get isConnecting() {\n    return this.state.match('Connecting');\n  }\n\n  get canConnect() {\n    return !this.isConnecting;\n  }\n\n  /**\n   * Trigger state changes\n   */\n\n  connect: EvmConnect = async (connector, options) => {\n    if (this.isConnecting) {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.CANNOT_CONNECT,\n        message: 'Cannot connect, as a connection attempt is already pending.',\n      });\n    }\n\n    if (this.isConnected) {\n      await this.disconnect();\n    }\n\n    if (!this.state.can('CONNECT')) {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.CANNOT_CONNECT,\n        message: 'Cannot connect.',\n      });\n    }\n\n    this.state.transition({\n      type: 'CONNECT',\n      data: {\n        connector,\n        options,\n      },\n    });\n\n    return new Promise((resolve, reject) => {\n      const handleResolve = (data: EvmConnectionData<unknown>) => {\n        resolve(data);\n        this._emitter.off(EvmNetworkEvent.CONNECTED, handleResolve);\n        this._emitter.off(EvmNetworkEvent.CONNECTING_ERROR, handleReject);\n      };\n      const handleReject = (error: Error) => {\n        reject(error);\n        this._emitter.off(EvmNetworkEvent.CONNECTED, handleResolve);\n        this._emitter.off(EvmNetworkEvent.CONNECTING_ERROR, handleReject);\n      };\n\n      this._emitter.on(EvmNetworkEvent.CONNECTED, handleResolve);\n      this._emitter.on(EvmNetworkEvent.CONNECTING_ERROR, handleReject);\n    });\n  };\n\n  disconnect = async () => {\n    if (this.isConnecting) {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.CANNOT_CONNECT,\n        message: 'Cannot disconnect, as a connection attempt is still pending',\n      });\n    }\n\n    if (!this.state.can('DISCONNECT')) {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.CANNOT_CONNECT,\n        message: 'Cannot disconnect',\n      });\n    }\n\n    this.state.transition({ type: 'DISCONNECT' });\n  };\n\n  cancelRequest = async () => {\n    if (!this.isConnecting) {\n      throw new MoralisNetworkError({\n        code: NetworkErrorCode.CANNOT_CANCEL,\n        message: 'Cannot cancel request, as no connection attempt is pending',\n      });\n    }\n    cancelWalletRequest(this.connector!)\n      .then(() => {\n        this.state.transition({\n          type: 'CONNECT_ERROR',\n          data: new MoralisNetworkError({\n            code: NetworkErrorCode.CANNOT_CONNECT,\n            message: 'Request cancelled',\n          }),\n        });\n      })\n      .catch(() => {\n        throw new MoralisNetworkError({\n          code: NetworkErrorCode.CANNOT_CANCEL,\n          message: 'Cannot cancel request',\n        });\n      });\n  };\n\n  /**\n   * Getters\n   */\n\n  get hasProvider() {\n    return this._provider !== null;\n  }\n\n  get provider() {\n    if (!this._provider) {\n      return null;\n    }\n\n    return this._provider.getSigner(this.account?.lowercase);\n  }\n\n  get chain() {\n    return this.connector?.chain ?? null;\n  }\n\n  get account() {\n    return this.connector?.account ?? null;\n  }\n}\n","import { EvmAddress, EvmAddressish, EvmChainish } from '@moralisweb3/core';\nimport { BigNumber, BigNumberish, BytesLike, ethers } from 'ethers';\nimport { assertAddress } from '../assert/assertAddress';\nimport { assertChain, assertChainEquality } from '../assert/assertChain';\nimport { assertProvider } from '../assert/assertProvider';\nimport { Erc1155__factory } from '../Contract';\nimport { wrapEthersTransactionResponse } from '../utils/wrapEthersTransactionResponse';\n\nexport interface TransferErc1155Options {\n  contractAddress: EvmAddressish;\n  to: EvmAddressish;\n  tokenId: BigNumberish;\n  value: BigNumberish;\n  data?: BytesLike;\n  chain?: EvmChainish;\n}\n\nexport const makeTransferErc1155 =\n  (_provider: null | ethers.providers.JsonRpcSigner, _account: EvmAddress | null, _chain: EvmChainish | null) =>\n  async (options: TransferErc1155Options) => {\n    const provider = assertProvider(_provider);\n    const fromAddress = assertAddress(_account, 'No account is connected');\n    const chain = assertChain(_chain, 'Chain is not set on MoralisEvm. Make sure to be properly connected');\n\n    if (options.chain) {\n      assertChainEquality(options.chain, chain);\n    }\n\n    const contractAddress = EvmAddress.create(options.contractAddress);\n    const toAddress = EvmAddress.create(options.to);\n    const { tokenId } = options;\n    const value = BigNumber.from(options.value);\n    const data = options.data ?? [];\n\n    const token = Erc1155__factory.connect(contractAddress.checksum, provider);\n\n    const response = await token.safeTransferFrom(fromAddress.checksum, toAddress.checksum, tokenId, value, data);\n\n    return wrapEthersTransactionResponse(response, chain);\n  };\n","import { JsonFragment, JsonFragmentType } from '@ethersproject/abi';\nimport { EvmAddress, EvmAddressish, MoralisServerError, ServerErrorCode } from '@moralisweb3/core';\nimport ethers, { BigNumberish, Contract, ContractFunction } from 'ethers';\nimport { assertProvider } from '../assert/assertProvider';\n\ntype Params = Record<string, unknown>;\n\nexport interface ExecuteFunctionOverrides {\n  value?: BigNumberish;\n  from?: EvmAddressish;\n  gasLimit?: BigNumberish;\n  gasPrice?: BigNumberish;\n  nonce?: BigNumberish;\n}\nexport interface EcecuteFunctionOptions {\n  contractAddress: EvmAddressish;\n  abi: JsonFragment[];\n  functionName: string;\n  params?: Params;\n  overrides?: ExecuteFunctionOverrides;\n}\n\nconst isContractFunction = <Result>(contractFunction: unknown): contractFunction is ContractFunction<Result> => {\n  if (!contractFunction) {\n    return false;\n  }\n\n  return true;\n};\n\nconst allInputsMatchTopics = (inputs: readonly JsonFragmentType[], topics: string[]) => {\n  return inputs.every((input, index) => input.type === topics[index]);\n};\n\nconst getPossibleTopics = (functionDataArray: JsonFragment[]) => {\n  return functionDataArray.map((data) => `${data.name}(${data.inputs?.map((input) => input.type).join(',')})`);\n};\n\nconst getOverloadedFunctionData = (overloadedFunctionMatch: RegExpMatchArray, abi: EcecuteFunctionOptions['abi']) => {\n  const nameWithoutTopics = overloadedFunctionMatch[1];\n  const topics = overloadedFunctionMatch[2]\n    .split(',')\n    .map((topic) => topic.trim())\n    .filter((topic) => !!topic);\n\n  const functionDataArray = abi.filter((x) => x.name === nameWithoutTopics);\n\n  if (functionDataArray.length === 0) {\n    throw new MoralisServerError({\n      code: ServerErrorCode.CONTRACT_EXECUTION_FAILED,\n      message: 'Function does not exist in abi',\n    });\n  }\n\n  const functionData = functionDataArray.find(({ inputs }) => {\n    if (!inputs) {\n      return false;\n    }\n\n    const hasSameInputs = (inputs?.length ?? 0) === topics.length;\n    if (!hasSameInputs) {\n      return false;\n    }\n\n    if (!allInputsMatchTopics(inputs, topics)) {\n      return false;\n    }\n\n    return true;\n  });\n\n  if (!functionData) {\n    const errorMessage = `Function with the provided topic does not exist in abi. Possible funcationNames: ${getPossibleTopics(\n      functionDataArray,\n    ).join(' ,')}`;\n\n    throw new MoralisServerError({\n      code: ServerErrorCode.CONTRACT_EXECUTION_FAILED,\n      message: errorMessage,\n    });\n  }\n\n  return functionData;\n};\n\nconst getFunctionData = (functionName: EcecuteFunctionOptions['functionName'], abi: EcecuteFunctionOptions['abi']) => {\n  // Check if function is an overloaded function definition. ex \"getMessage(string)\", or \"getMessage()\"\n  const overloadedFunctionMatch = functionName.match(/^(.+)\\((.*)\\)$/);\n\n  if (overloadedFunctionMatch) {\n    return getOverloadedFunctionData(overloadedFunctionMatch, abi);\n  }\n\n  const functionDataArray = abi.filter((x) => x.name === functionName);\n\n  const hasFunctionData = functionDataArray.length > 0;\n  const hasOneFunctionData = functionDataArray.length > 0;\n\n  if (!hasFunctionData) {\n    throw new MoralisServerError({\n      code: ServerErrorCode.CONTRACT_EXECUTION_FAILED,\n      message: 'Function does not exist in abi',\n    });\n  }\n\n  if (!hasOneFunctionData) {\n    const errorMessage = `Multiple function definitions found in the abi. Please include the topic in the functionName. Possible funcationNames: ${getPossibleTopics(\n      functionDataArray,\n    ).join(' ,')}`;\n\n    throw new MoralisServerError({\n      code: ServerErrorCode.CONTRACT_EXECUTION_FAILED,\n      message: errorMessage,\n    });\n  }\n\n  return functionDataArray[0];\n};\n\nconst assertParams = (functionData: JsonFragment, params: Params = {}) => {\n  const missingParams: string[] = [];\n\n  if (!functionData.inputs) {\n    return;\n  }\n\n  for (const input of functionData.inputs) {\n    if (!input.name) {\n      continue;\n    }\n\n    const value = params[input.name];\n\n    if (value == null) {\n      missingParams.push(input.name);\n    }\n  }\n\n  if (missingParams.length === 0) {\n    return;\n  }\n\n  throw new MoralisServerError({\n    code: ServerErrorCode.CONTRACT_EXECUTION_FAILED,\n    message: `Missing values for required parameters: ${missingParams.join(', ')}`,\n  });\n};\n\nconst parseParams = (functionData: JsonFragment, params?: Params) =>\n  (functionData.inputs ?? []).map((input) => {\n    if (params && input.name && params[input.name]) {\n      return params[input.name];\n    }\n  });\n\nconst parseOverrides = (overrides: ExecuteFunctionOverrides = {}) => ({\n  ...overrides,\n  from: overrides.from ? EvmAddress.create(overrides.from).checksum : undefined,\n});\n\n// TODO: add generic types to make sure functionName is defined (and possible return gemeric typed result? Can we use typechain as well?)\n// TODO: split up in read and write call (and wrap write call in EvmTransactionReceipt)\nexport const makeExecutefunction =\n  (_provider: null | ethers.providers.JsonRpcSigner) =>\n  async <Result>(options: EcecuteFunctionOptions) => {\n    const provider = assertProvider(_provider);\n\n    const contractAddress = EvmAddress.create(options.contractAddress);\n    const { abi, functionName, params, overrides } = options;\n\n    const functionData = getFunctionData(functionName, abi);\n\n    assertParams(functionData, params);\n\n    const contract = new Contract(contractAddress.checksum, abi).connect(provider);\n    const contractMethod = contract[functionName];\n\n    if (!isContractFunction<Result>(contractMethod)) {\n      throw new MoralisServerError({\n        code: ServerErrorCode.CONTRACT_EXECUTION_FAILED,\n        message: 'Provided functionName does not exist',\n      });\n    }\n\n    const parsedParams = parseParams(functionData, params);\n    const parsedOverrides = parseOverrides(overrides);\n\n    const result = contractMethod(...parsedParams, parsedOverrides);\n\n    return result;\n  };\n","import { ethers } from 'ethers';\nimport { EvmTransactionInput, MoralisCore, MoralisCoreProvider } from '@moralisweb3/core';\nimport { NetworkModule, EvmConnect } from '@moralisweb3/core';\nimport { EvmNetworkEvent, EvmNetworkEventMap } from './events/EvmNetworkEvent';\nimport { makeSendTransaction } from './chainMethods/sendTransaction';\nimport { makeSignMessage } from './chainMethods/signMessage';\nimport { makeTransferNative, TransferNativeOptions } from './chainMethods/transferNative';\nimport { makeTransferErc20, TransferErc20Options } from './chainMethods/transferErc20';\nimport { makeTransferErc721, TransferErc721Options } from './chainMethods/transferErc721';\nimport { Connection } from './Connection/Connection';\nimport { makeTransferErc1155, TransferErc1155Options } from './chainMethods/transferErc1155';\nimport { EcecuteFunctionOptions, makeExecutefunction } from './chainMethods/executeFunction';\n\nexport class MoralisEvm extends NetworkModule<EvmNetworkEventMap> {\n  public static readonly moduleName = 'evm';\n\n  public static create(core?: MoralisCore): MoralisEvm {\n    return new MoralisEvm(core || MoralisCoreProvider.getDefault());\n  }\n\n  private connection: Connection = new Connection(this.logger, this.emitter);\n\n  public constructor(core: MoralisCore) {\n    super(MoralisEvm.moduleName, core);\n  }\n\n  /**\n   * Event listeners\n   */\n\n  onConnecting = (fn: EvmNetworkEventMap['Connecting']) => this.listen(EvmNetworkEvent.CONNECTING, fn);\n  onConnected = (fn: EvmNetworkEventMap['Connected']) => this.listen(EvmNetworkEvent.CONNECTED, fn);\n  onDisconnected = (fn: EvmNetworkEventMap['Disconnected']) => this.listen(EvmNetworkEvent.DISCONNECTED, fn);\n  onConnectingError = (fn: EvmNetworkEventMap['ConnectingError']) => this.listen(EvmNetworkEvent.CONNECTING_ERROR, fn);\n  onAccountChanged = (fn: EvmNetworkEventMap['AccountChanged']) => this.listen(EvmNetworkEvent.ACCOUNT_CHANGED, fn);\n  onChainChanged = (fn: EvmNetworkEventMap['ChainChanged']) => this.listen(EvmNetworkEvent.CHAIN_CHANGED, fn);\n  onProviderUpdated = (fn: EvmNetworkEventMap['ProviderUpdated']) => this.listen(EvmNetworkEvent.PROVIDER_UPDATED, fn);\n\n  /**\n   * General\n   */\n\n  get web3Library() {\n    return ethers;\n  }\n\n  /**\n   * Connection getters\n   */\n\n  /**\n   * Get all available connectors\n   */\n  get connectors() {\n    return this.connection.connectors;\n  }\n\n  /**\n   * Get all names of available connectors\n   */\n  get supportedConnectors() {\n    return this.connection.connectors.names;\n  }\n\n  /**\n   * Return the connected connector\n   */\n  get connector() {\n    return this.connection.connector;\n  }\n\n  get provider() {\n    return this.connection.provider;\n  }\n\n  get hasProvider() {\n    return this.connection.hasProvider;\n  }\n\n  get chain() {\n    return this.connection.chain;\n  }\n\n  get account() {\n    return this.connection.account;\n  }\n\n  get isConnected() {\n    return this.connection.isConnected;\n  }\n\n  get isConnecting() {\n    return this.connection.isConnecting;\n  }\n\n  public setup() {\n    // Nothing\n  }\n\n  public start(): void | Promise<void> {\n    // Nothing\n  }\n\n  /**\n   * Connection methods\n   */\n\n  connect: EvmConnect = async (connector, options) => {\n    return this.connection.connect(connector, options);\n  };\n\n  disconnect = () => {\n    return this.connection.disconnect();\n  };\n\n  cancelRequest = () => {\n    return this.connection.cancelRequest();\n  };\n\n  /**\n   * Chain Methods\n   */\n\n  signMessage = (message: string) => makeSignMessage(this.provider)(message);\n  sendTransaction = (data: EvmTransactionInput) => makeSendTransaction(this.provider, this.chain)(data);\n  transferNative = (data: TransferNativeOptions) => makeTransferNative(this.sendTransaction, this.chain)(data);\n  transferErc20 = (data: TransferErc20Options) => makeTransferErc20(this.provider, this.chain)(data);\n  transferErc721 = (data: TransferErc721Options) => makeTransferErc721(this.provider, this.account, this.chain)(data);\n  transferErc1155 = (data: TransferErc1155Options) =>\n    makeTransferErc1155(this.provider, this.account, this.chain)(data);\n  executeFunction = (data: EcecuteFunctionOptions) => makeExecutefunction(this.provider)(data);\n}\n"],"names":["EvmChain","MoralisNetworkError","NetworkErrorCode","ethers","EvmTransactionReceipt","EvmTransactionResponse","EvmTransaction","EvmAddress","EvmNative","_abi","utils","Contract","Erc20Value","MetamaskConnector","core","MoralisCoreProvider","MoralisState","EvmConnectorEvent","providers","BigNumber","MoralisServerError","ServerErrorCode","NetworkModule"],"mappings":"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"}