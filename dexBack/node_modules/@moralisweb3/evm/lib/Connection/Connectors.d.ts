import { MoralisCore } from '@moralisweb3/core';
import { ConnectorFactory, EvmAbstractConnector } from '@moralisweb3/evm-connector-utils';
export declare class Connectors {
    private readonly core;
    private _connectors;
    static create(): Connectors;
    constructor(core: MoralisCore);
    /**
     * Register a new connector based on a EvmAbstractConnector
     */
    register: (connector: EvmAbstractConnector | ConnectorFactory) => void;
    /**
     * Returns the connector with the given name.
     * This connector should have been registered with `register`
     * Throws an error if no connector with the given name has been registered.
     */
    get: <Connector extends EvmAbstractConnector<import("@moralisweb3/core").EvmProvider, import("@moralisweb3/core").EvmBaseConnectOptions> = EvmAbstractConnector<import("@moralisweb3/core").EvmProvider, import("@moralisweb3/core").EvmBaseConnectOptions>>(name: string) => Connector;
    /**
     * Remove the connector with the provided name, if it has been registered,
     * or throws an error if the connector cannot be found.
     */
    remove: (name: string) => void;
    /**
     * List all the registered connectors
     */
    list: () => EvmAbstractConnector<import("@moralisweb3/core").EvmProvider, import("@moralisweb3/core").EvmBaseConnectOptions>[];
    /**
     * Returns the names of all registered connectors
     */
    get names(): string[];
}
//# sourceMappingURL=Connectors.d.ts.map