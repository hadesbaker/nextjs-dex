import { ethers } from 'ethers';
import { EvmTransactionInput, MoralisCore } from '@moralisweb3/core';
import { NetworkModule, EvmConnect } from '@moralisweb3/core';
import { EvmNetworkEventMap } from './events/EvmNetworkEvent';
import { TransferNativeOptions } from './chainMethods/transferNative';
import { TransferErc20Options } from './chainMethods/transferErc20';
import { TransferErc721Options } from './chainMethods/transferErc721';
import { TransferErc1155Options } from './chainMethods/transferErc1155';
import { EcecuteFunctionOptions } from './chainMethods/executeFunction';
export declare class MoralisEvm extends NetworkModule<EvmNetworkEventMap> {
    static readonly moduleName = "evm";
    static create(core?: MoralisCore): MoralisEvm;
    private connection;
    constructor(core: MoralisCore);
    /**
     * Event listeners
     */
    onConnecting: (fn: EvmNetworkEventMap['Connecting']) => () => import("typed-emitter").default<EvmNetworkEventMap>;
    onConnected: (fn: EvmNetworkEventMap['Connected']) => () => import("typed-emitter").default<EvmNetworkEventMap>;
    onDisconnected: (fn: EvmNetworkEventMap['Disconnected']) => () => import("typed-emitter").default<EvmNetworkEventMap>;
    onConnectingError: (fn: EvmNetworkEventMap['ConnectingError']) => () => import("typed-emitter").default<EvmNetworkEventMap>;
    onAccountChanged: (fn: EvmNetworkEventMap['AccountChanged']) => () => import("typed-emitter").default<EvmNetworkEventMap>;
    onChainChanged: (fn: EvmNetworkEventMap['ChainChanged']) => () => import("typed-emitter").default<EvmNetworkEventMap>;
    onProviderUpdated: (fn: EvmNetworkEventMap['ProviderUpdated']) => () => import("typed-emitter").default<EvmNetworkEventMap>;
    /**
     * General
     */
    get web3Library(): typeof ethers;
    /**
     * Connection getters
     */
    /**
     * Get all available connectors
     */
    get connectors(): import("./Connection/Connectors").Connectors;
    /**
     * Get all names of available connectors
     */
    get supportedConnectors(): string[];
    /**
     * Return the connected connector
     */
    get connector(): import("@moralisweb3/evm-connector-utils").EvmAbstractConnector<import("@moralisweb3/core").EvmProvider, import("@moralisweb3/core").EvmBaseConnectOptions> | null;
    get provider(): ethers.providers.JsonRpcSigner | null;
    get hasProvider(): boolean;
    get chain(): import("@moralisweb3/core").EvmChain | null;
    get account(): import("@moralisweb3/core").EvmAddress | null;
    get isConnected(): boolean;
    get isConnecting(): boolean;
    setup(): void;
    start(): void | Promise<void>;
    /**
     * Connection methods
     */
    connect: EvmConnect;
    disconnect: () => Promise<void>;
    cancelRequest: () => Promise<void>;
    /**
     * Chain Methods
     */
    signMessage: (message: string) => Promise<string>;
    sendTransaction: (data: EvmTransactionInput) => Promise<import("@moralisweb3/core").EvmTransactionResponse>;
    transferNative: (data: TransferNativeOptions) => Promise<import("@moralisweb3/core").EvmTransactionResponse>;
    transferErc20: (data: TransferErc20Options) => Promise<import("@moralisweb3/core").EvmTransactionResponse>;
    transferErc721: (data: TransferErc721Options) => Promise<import("@moralisweb3/core").EvmTransactionResponse>;
    transferErc1155: (data: TransferErc1155Options) => Promise<import("@moralisweb3/core").EvmTransactionResponse>;
    executeFunction: (data: EcecuteFunctionOptions) => Promise<unknown>;
}
//# sourceMappingURL=MoralisEvm.d.ts.map