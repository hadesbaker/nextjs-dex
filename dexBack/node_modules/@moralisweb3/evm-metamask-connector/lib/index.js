'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var detectEthereumProvider = require('@metamask/detect-provider');
var evmConnectorUtils = require('@moralisweb3/evm-connector-utils');
var core = require('@moralisweb3/core');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var detectEthereumProvider__default = /*#__PURE__*/_interopDefaultLegacy(detectEthereumProvider);

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    if (typeof b !== "function" && b !== null)
        throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

var DEFAULT_OPTIONS = {
    silent: false,
    timeout: 30000,
};
var EvmMetamaskConnector = /** @class */ (function (_super) {
    __extends(EvmMetamaskConnector, _super);
    function EvmMetamaskConnector(core) {
        return _super.call(this, EvmMetamaskConnector.connectorName, core) || this;
    }
    EvmMetamaskConnector.create = function (core$1) {
        return new EvmMetamaskConnector(core$1 || core.MoralisCoreProvider.getDefault());
    };
    EvmMetamaskConnector.prototype.createProvider = function (options) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function () {
            var provider;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0: return [4 /*yield*/, detectEthereumProvider__default["default"]({
                            silent: options === null || options === void 0 ? void 0 : options.silent,
                            timeout: options === null || options === void 0 ? void 0 : options.timeout,
                            mustBeMetaMask: true,
                        })];
                    case 1:
                        provider = (_c.sent());
                        // Provider can be a single provider or array of providers (for example when user has coinbasewallet and metamask installed)
                        if (provider && ((_a = provider.providers) === null || _a === void 0 ? void 0 : _a.length)) {
                            provider = (_b = provider.providers.find(function (currentProvider) { return currentProvider.isMetaMask; })) !== null && _b !== void 0 ? _b : null;
                        }
                        if (!provider) {
                            throw new core.MoralisNetworkConnectorError({
                                code: core.NetworkConnectorErrorCode.NO_PROVIDER,
                                message: "No injected provider found at 'window.ethereum', make sure to have Metamask or any other injected wallet installed.",
                            });
                        }
                        return [2 /*return*/, provider];
                }
            });
        });
    };
    EvmMetamaskConnector.prototype.createConnection = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var finalOptions, provider, _a, accounts, chainId;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        finalOptions = __assign(__assign({}, DEFAULT_OPTIONS), { options: options });
                        this.logger.verbose('Connecting', { providedOptions: options, options: finalOptions });
                        return [4 /*yield*/, this.getProvider(finalOptions)];
                    case 1:
                        provider = _b.sent();
                        return [4 /*yield*/, Promise.all([
                                provider.request({ method: 'eth_requestAccounts' }),
                                provider.request({ method: 'eth_chainId' }),
                            ])];
                    case 2:
                        _a = _b.sent(), accounts = _a[0], chainId = _a[1];
                        return [2 /*return*/, {
                                provider: provider,
                                chain: core.EvmChain.create(chainId),
                                account: accounts[0] ? core.EvmAddress.create(accounts[0]) : null,
                            }];
                }
            });
        });
    };
    EvmMetamaskConnector.prototype.switchNetwork = function (providedChain) {
        return __awaiter(this, void 0, void 0, function () {
            var chain, provider, currentNetwork;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        chain = core.EvmChain.create(providedChain);
                        return [4 /*yield*/, this.getProvider()];
                    case 1:
                        provider = _a.sent();
                        currentNetwork = this.chain;
                        if (currentNetwork && currentNetwork.equals(chain)) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, provider.request({
                                method: 'wallet_switchEthereumChain',
                                params: [{ chainId: chain.hex }],
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    EvmMetamaskConnector.prototype.addNetwork = function (providedChain) {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var chain, provider;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        chain = core.EvmChain.create(providedChain);
                        return [4 /*yield*/, this.getProvider()];
                    case 1:
                        provider = _b.sent();
                        return [4 /*yield*/, provider.request({
                                method: 'wallet_addEthereumChain',
                                params: [
                                    {
                                        chainId: chain.hex,
                                        chainName: chain.name,
                                        nativeCurrency: chain.currency
                                            ? {
                                                name: chain.currency.name,
                                                symbol: chain.currency.symbol,
                                                decimals: chain.currency.decimals,
                                            }
                                            : undefined,
                                        // TODO: validate rpcUrls
                                        rpcUrls: chain.rpcUrls,
                                        blockExplorerUrls: ((_a = chain.explorer) === null || _a === void 0 ? void 0 : _a.url) ? [chain.explorer.url] : null,
                                    },
                                ],
                            })];
                    case 2:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    EvmMetamaskConnector.connectorName = 'metamask';
    return EvmMetamaskConnector;
}(evmConnectorUtils.EvmAbstractConnector));

var create = EvmMetamaskConnector.create;

exports.EvmMetamaskConnector = EvmMetamaskConnector;
exports.create = create;
exports["default"] = EvmMetamaskConnector;
//# sourceMappingURL=index.js.map
