{"version":3,"file":"index.js","sources":["../src/EvmMetamaskConnector.ts","../src/index.ts"],"sourcesContent":["import detectEthereumProvider from '@metamask/detect-provider';\nimport { EvmAbstractConnector } from '@moralisweb3/evm-connector-utils';\nimport {\n  EvmAddress,\n  EvmChain,\n  EvmChainish,\n  EvmConnection,\n  EvmMetamaskConnectorConnectOptions,\n  EvmProvider,\n  MoralisCore,\n  MoralisCoreProvider,\n  MoralisNetworkConnectorError,\n  NetworkConnectorErrorCode,\n} from '@moralisweb3/core';\n\nconst DEFAULT_OPTIONS: EvmMetamaskConnectorConnectOptions = {\n  silent: false,\n  timeout: 30000,\n};\n\nexport type MetamaskProvider = EvmProvider & { isMetaMask?: boolean; providers?: MetamaskProvider[] };\n\nexport class EvmMetamaskConnector extends EvmAbstractConnector<MetamaskProvider, EvmMetamaskConnectorConnectOptions> {\n  public static readonly connectorName = 'metamask';\n\n  public static create(core?: MoralisCore): EvmMetamaskConnector {\n    return new EvmMetamaskConnector(core || MoralisCoreProvider.getDefault());\n  }\n\n  public constructor(core: MoralisCore) {\n    super(EvmMetamaskConnector.connectorName, core);\n  }\n\n  protected async createProvider(options?: EvmMetamaskConnectorConnectOptions): Promise<MetamaskProvider> {\n    let provider: MetamaskProvider | null = (await detectEthereumProvider({\n      silent: options?.silent,\n      timeout: options?.timeout,\n      mustBeMetaMask: true,\n    })) as MetamaskProvider | null;\n\n    // Provider can be a single provider or array of providers (for example when user has coinbasewallet and metamask installed)\n    if (provider && provider.providers?.length) {\n      provider = provider.providers.find((currentProvider) => currentProvider.isMetaMask) ?? null;\n    }\n\n    if (!provider) {\n      throw new MoralisNetworkConnectorError({\n        code: NetworkConnectorErrorCode.NO_PROVIDER,\n        message:\n          \"No injected provider found at 'window.ethereum', make sure to have Metamask or any other injected wallet installed.\",\n      });\n    }\n    return provider;\n  }\n\n  protected async createConnection(options?: EvmMetamaskConnectorConnectOptions): Promise<EvmConnection> {\n    const finalOptions = { ...DEFAULT_OPTIONS, options };\n    this.logger.verbose('Connecting', { providedOptions: options, options: finalOptions });\n    const provider = await this.getProvider(finalOptions);\n\n    const [accounts, chainId] = await Promise.all([\n      provider.request({ method: 'eth_requestAccounts' }) as Promise<string[]>,\n      provider.request({ method: 'eth_chainId' }) as Promise<string>,\n    ]);\n\n    return {\n      provider,\n      chain: EvmChain.create(chainId),\n      account: accounts[0] ? EvmAddress.create(accounts[0]) : null,\n    };\n  }\n\n  public async switchNetwork(providedChain: EvmChainish): Promise<void> {\n    const chain = EvmChain.create(providedChain);\n\n    const provider = await this.getProvider();\n\n    const currentNetwork = this.chain;\n    if (currentNetwork && currentNetwork.equals(chain)) {\n      return;\n    }\n\n    await provider.request({\n      method: 'wallet_switchEthereumChain',\n      params: [{ chainId: chain.hex }],\n    });\n  }\n\n  public async addNetwork(providedChain: EvmChainish): Promise<void> {\n    const chain = EvmChain.create(providedChain);\n\n    const provider = await this.getProvider();\n\n    await provider.request({\n      method: 'wallet_addEthereumChain',\n      params: [\n        {\n          chainId: chain.hex,\n          chainName: chain.name,\n          nativeCurrency: chain.currency\n            ? {\n                name: chain.currency.name,\n                symbol: chain.currency.symbol,\n                decimals: chain.currency.decimals,\n              }\n            : undefined,\n          // TODO: validate rpcUrls\n          rpcUrls: chain.rpcUrls,\n          blockExplorerUrls: chain.explorer?.url ? [chain.explorer.url] : null,\n        },\n      ],\n    });\n  }\n}\n","import { EvmMetamaskConnector } from './EvmMetamaskConnector';\n\nconst create = EvmMetamaskConnector.create;\nexport { create }; // For UMD builds.\n\nexport * from './EvmMetamaskConnector';\nexport default EvmMetamaskConnector;\n"],"names":["core","MoralisCoreProvider","detectEthereumProvider","MoralisNetworkConnectorError","NetworkConnectorErrorCode","EvmChain","EvmAddress","EvmAbstractConnector"],"mappings":"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"}